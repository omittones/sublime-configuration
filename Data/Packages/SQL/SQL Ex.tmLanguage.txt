<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sql</string>
		<string>pck</string>
		<string>ddl</string>
		<string>dml</string>
	</array>

	<key>foldingStartMarker</key>
	<string>\s*\(\s*$</string>

	<key>foldingStopMarker</key>
	<string>^\s*\)</string>

	<key>keyEquivalent</key>
	<string>^~S</string>

	<key>name</key>
	<string>SQL Ex</string>

	<key>patterns</key>
	<array>
		<dict comment="ORACLE multiline embeded DSQL">
			<key>begin</key>
			<string>(?xi) q'( \[ | \( | \{ )</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.sql</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?xi) ( \] | \) | \} )'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.sql</string>
				</dict>
			</dict>
			<key>name</key>
			<string>markup.quote.sql</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>

		<dict comment="MSSQL multiline embeded DSQL">
			<key>begin</key>
			<string>(?xi) N (') (\s* -- \s* d?sql .*? $)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.line.double-dash.sql</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?xi) (') ;? (\s* -- \s* d?sql .*? $)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.line.double-dash.sql</string>
				</dict>
			</dict>
			<key>name</key>
			<string>markup.quote.sql</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>

		<dict comment="repo:comments">
			<key>include</key><string>#comments</string>
		</dict>
		<dict comment="repo:strings">
			<key>include</key><string>#strings</string>
		</dict>
		<dict comment="repo:regexps">
			<key>include</key><string>#regexps</string>
		</dict>

		<dict comment="SQL PACKAGE.method_call(">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.package.name.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.function-call.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i)\b\[?([\w\_\-\d]*)\]?\.\[?([\w_\-\d]*)\]?\s*\(</string>
		</dict>

		<dict comment="Language variables">
			<key>match</key>
			<string>(?i)\b(column_value|rownum|level|rowid|(next|curr)val|max|min|sysdate|systimestamp|sqlcode|sqlerrm|dual)\b</string>
			<key>name</key>
			<string>variable.language.sql</string>
		</dict>

		<dict comment="MSSQL Language variables">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				(?:\s | ,)
				(
					\$action | next | local | forward_only | caller
				)
				\b
			</string>
		</dict>
		<dict comment="MSSQL Language variables">
			<key>match</key>
			<string>(?i)($|\s+|\()@@[\w_]+</string>
			<key>name</key>
			<string>variable.language.sql</string>
		</dict>
		<dict comment="Language variables - columns">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.alias.name.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.language.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i)\b\[?([\w\_\-\d]*)\]?\.(column_value|rownum|rowid|(next|curr)val)\b</string>
		</dict>
		<dict comment="Language variables ololo % ololo">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.sql</string>
				</dict>
				<key>2</key>
 				<dict>
					<key>name</key>
					<string>variable.language.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i)\b([_\w\d]+)%(found|isopen|notfound|rowcount|rowtype|type)\b</string>
			<key>name</key>
			<string>meta.variable.language.sql</string>
		</dict>
		<dict comment="Language constants">
			<key>match</key>
			<string>(?i)\b(null|false|true)\b</string>
			<key>name</key>
			<string>constant.language.sql</string>
		</dict>
		<dict comment="SQL alias.column">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.alias.name.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.constant.column.name.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.language.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)\b
				\[?([\w\_$\-\d]*)\]?
				\.
				\[?([\w_\$\-\d]*)\]?
				(?:%(found|isopen|notfound|rowcount|rowtype|type))?
				\b
			</string>
		</dict>
		<dict comment="create statement">
			<key>captures</key>
			<dict>
				<key comment="create ddl operator">1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key comment="db object type">2</key>
 				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
				<key comment="object name">3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql markup.bold.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				# create ddl operator
				^\s*
				(
					(?:create (?:\s+or\s+replace)? | alter)
					(?:\s+ force)?
				)\s+

				# object type
				(
					aggregate | conversion | database | domain | function | procedure | package(?:\s+body)? | group |
					(?: (?:unique | nonclustered | clustered) \s+)? index | language | operator class | operator | rule |
					schema | sequence | table | column | tablespace | trigger | type | user | view
				)
				\s+

				# object name
				['"`]?([\[\]\w\._#]+)['"`]?
			</string>
			<key>name</key>
			<string>meta.create.sql</string>
		</dict>
		<dict comment="simple from/join statement">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.DML.sql</string>
				</dict>
				<key>3</key>
 				<dict>
					<key>name</key>
					<string>keyword.other.alias.sql</string>
				</dict>
				<key>4</key>
 				<dict>
					<key>name</key>
					<string>support.other.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				\s* (from | join | (?:left | right | inner | cross) \s+ join ) \s+
				([\w_#]+)\s+
				(as\s+)?
				([\w_]+)
			</string>
			<key>name</key>
			<string>meta.create.sql</string>
		</dict>
		<dict comment="procedure/function/type declaration">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
				<key>2</key>
 				<dict>
					<key>name</key>
					<string>entity.name.function.sql markup.bold.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i)^\s*(procedure|function|type)(\s+[\w_]+)</string>
			<key>name</key>
			<string>meta.create.sql</string>
		</dict>
		<dict comment="Variables p_, v_, l_.">
			<key>match</key>
			<string>(?i)(\b|\()@?(v|p|l|c|lc)_[\w\d_]+\b</string>
			<key>name</key>
			<string>variable.parameter.sql</string>
		</dict>
		<dict comment="Variables @blah_blah">
			<key>match</key>
			<string>(?i)@[\w\d_]+\b</string>
			<key>name</key>
			<string>variable.parameter.sql</string>
		</dict>
		<dict comment="Temp tables: ttt_, tt_.">
			<key>match</key>
			<string>(?i)\b((tt|ttt)_.*?)\b</string>
			<key>name</key>
			<string>storage.type.sql</string>
		</dict>
		<dict comment="Temp MSSQL objects: #ololo.">
			<key>match</key>
			<string>(?i)#[\w\d_]+\b</string>
			<key>name</key>
			<string>storage.type.sql</string>
		</dict>
		<dict comment="Custom types t_.">
			<key>match</key>
			<string>(?i)\b([ro]?t_.*?)\b</string>
			<key>name</key>
			<string>storage.type.sql</string>
		</dict>
		<dict comment="drop object statement">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				^\s*(drop)
				\s+
				(
					aggregate | conversion | database | domain | function | procedure | group | index |
					language | operator\s+class | operator | rule | schema | sequence | table | tablespace |
					trigger | type | user | view
				)
			</string>
			<key>name</key>
			<string>meta.drop.sql</string>
		</dict>
		<dict comment="alter statement">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.table.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(alter)\s+(aggregate|conversion|database|domain|function|procedure|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)</string>
			<key>name</key>
			<string>meta.alter.sql</string>
		</dict>

		<dict comment="set option value">
			<key>captures</key>
			<dict>
				<key>1</key><dict><key>name</key><string>keyword.sql</string></dict>
				<key>2</key><dict><key>name</key><string>variable.language.sql</string></dict>
				<key>3</key><dict><key>name</key><string>constant.language.sql</string></dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				^
				\s*
				(set)
				\s+
				(
					ansi_defaults | ansi_null_dflt_off | ansi_null_dflt_on | ansi_nulls | ansi_padding | ansi_warnings | arithabort | arithignore |
					concat_null_yields_null | cursor_close_on_commit | datefirst | dateformat | deadlock_priority | fips_flagger | fmtonly | forceplan |
					identity_insert | implicit_transactions | language | lock_timeout | nocount | noexec | numeric_roundabort | offsets | parseonly |
					query_governor_cost_limit | quoted_identifier | remote_proc_transactions | rowcount | showplan_all | showplan_text | showplan_xml |
					statistics \s+ io | statistics \s+ profile | statistics \s+ time | statistics \s+ xml | textsize | transaction \s+ isolation \s+ level |
					xact_abort
				)
				\s+
				(
					.*?
				)
				;?
				$
			</string>
		</dict>


		<dict comment="use [database]">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.alias.name.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi) ^ \s* (use) \s+ \[? (.*?) \]? $</string>
			<key>name</key>
			<string>meta.use-database.sql</string>
		</dict>


		<dict comment="mssql keywords">
			<key>match</key>
			<string>(?i)\b(go|print)\b</string>
			<key>name</key>
			<string>constant.character.sql</string>
		</dict>
		<dict comment="build-in types">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>14</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>15</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)

				# normal stuff, capture 1
				\b(
					bigint | tinyint | bigserial | bit | raw |
					(?:ci?t_)?boolean | box | bytea | cidr | circle |
					(?:ci?t_)?date | datetime(?:2)? | cursor | double\sprecision | inet | int |
					(?:pls_ | binary_)? integer | line | lseg | macaddr | money | oid | path | point |
					polygon | real | serial | smallint | text | sysname | sys_refcursor | clob | blob |
					xmltype | xml | float | sql_variant
				)\b

				# numeric suffix, capture 2 + 3i
				| \b(bit\svarying | character\s(?:varying)? | tinyint | var\schar | float | interval)\((\d+)\)

				# optional numeric suffix, capture 4 + 5i
				| \b(n?char | (?:ci?t_)? number | (?:ci?t_)? n? varchar\d?(?:_s)?)\b(?:\((\d+)\))?

				# special case, capture 6 + 7i + 8i
				| \b(numeric)\b(?:\((\d+),(\d+)\))?

				# special case, captures 9, 10i, 11
				| \b(times)(?:\((\d+)\))(\swithoutstimeszone\b)?

				# special case, captures 12, 13, 14i, 15
				| \b(timestamp)(?:(s)\((\d+)\)(\s withoutstimeszone\b)?)?

			</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?i:\b((?:primary|foreign)\s+key|references|on\sdelete(\s+cascade)?|check|constraint)\b)</string>
			<key>name</key>
			<string>storage.modifier.sql</string>
		</dict>

		<dict comment="num constant">
			<key>match</key>
			<string>\b\d+\b</string>
			<key>name</key>
			<string>constant.numeric.sql</string>
		</dict>

		<dict comment="select statement">
			<key>match</key>
			<string>(?xi)
				\b
				(
					select ((\s+ top) | (\s+ distinct))? | (insert | merge)  \s+  (ignore \s+)? into | update (\s+ top)? | delete | from | bulk \s+ collect \s+ into |
					into | set | off | where | not | exists | partition \s+ by | group \s+ by | or | like | and | between | union(\s+ all)? | having | order \s+ by |
					limit | (inner | cross | full) \s+ join | straight_join | (left | right) (\s+ outer)?  \s+ join | join |
					natural (\s+ (left | right) (\s+ outer)?)? \s+ join | connect \s+ by
				)
				\b
			</string>
			<key>name</key>
			<string>keyword.other.DML.sql</string>
		</dict>

		<dict comment="end of named block">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
				<key>2</key>
 				<dict>
					<key>name</key>
					<string>support.other.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)
				^
				\s*
				(
					end | open | close | deallocate
				)
				\s+
				(
					[\w_]+
				)
			</string>
			<key>name</key>
			<string>meta.create.sql</string>
		</dict>

		<dict comment="PLSQL operators">
			<key>match</key>
			<string>(?xi)
				\b
				(
					return | returns | open | close | deallocate | fetch |
					for(all)? | while | loop | exit | continue | with |
					case | if | when ( (\s+ not)? \s+ matched)? | then | elsif | else | end | break | exception
				)
				\b
			</string>
			<key>name</key>
			<string>keyword.other.DML.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(on|is|((is\s+)?not\s+)?null)\b</string>
			<key>name</key>
			<string>keyword.other.DDL.create.II.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?xi) \b ( values | insert | using ) \b</string>
			<key>name</key>
			<string>keyword.other.DML.II.sql</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?xi)
				\b
				(
					declare |
					exec (ute)? ( \s+ immediate )? |
					begin ( \s+ ( try | catch | tran (saction)? | work ) )? |
					start \s+ tran (saction)? |
					save \s+ tran (saction)? |
					savepoint |
					commit ( \s+ ( work | tran (saction)? ) )? |
					rollback ( \s+ ( work (\s+ to) | tran(saction)? )? )?
				)
				\b
			</string>
			<key>name</key>
			<string>keyword.other.LUW.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(grant(\swith\sgrant\soption)? | revoke)\b)</string>
			<key>name</key>
			<string>keyword.other.authorization.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(in|out|output|readonly|nocopy|constant|default)\b</string>
			<key>name</key>
			<string>keyword.other.data-integrity.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:^\s*(comment\s+on\s+(table|column|aggregate|constraint|database|domain|procedure|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)</string>
			<key>name</key>
			<string>keyword.other.object-comments.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(as|is)\b</string>
			<key>name</key>
			<string>keyword.other.alias.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(desc|asc)\b</string>
			<key>name</key>
			<string>keyword.other.order.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\*</string>
			<key>name</key>
			<string>keyword.operator.star.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[!&lt;&gt;]?=|&lt;&gt;|&lt;|&gt;</string>
			<key>name</key>
			<string>keyword.operator.comparison.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>-|\+|/</string>
			<key>name</key>
			<string>keyword.operator.math.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\|\|</string>
			<key>name</key>
			<string>keyword.operator.concatenator.sql</string>
		</dict>
		<dict comment="List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html">
			<key>match</key>
			<string>(?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b</string>
			<key>name</key>
			<string>support.function.scalar.sql</string>
		</dict>
		<dict comment="List of SQL99 built-in functions">
			<key>match</key>
			<string>(?i)\b(avg|count|min|max|sum)(?=\s*\()</string>
			<key>name</key>
			<string>support.function.aggregate.sql</string>
		</dict>
		<dict comment="PLSQL built in functions">
			<key>match</key>
			<string>(?i)\b(using|cast|dateadd|getdate|length|len|greatest|least|instr|substr|nvl|nvl2|isnull|coalesce|nullif|decode|table|to_number|to_char|to_date|xmlsequence|extract|extractvalue|value|print|raiserror|error_message|error_number|error_line|error_procedure|xmltable|xmlagg|row_number|over|raise_application_error|raise_exception)(?=\s*\()</string>
			<key>name</key>
			<string>support.function.sql</string>
		</dict>

		<dict comment="MSSQL system procedures">
			<key>match</key>
			<string>(?xi)
				\b
				(
					sp_executesql | sp_xml_preparedocument | sp_xml_removedocument | openxml
				)
				\b
			</string>
			<key>name</key>
			<string>support.function.sql</string>
		</dict>

		<dict comment="MSSQL built in functions">
			<key>match</key>
			<string>(?xi)
				\b
				(
					object_id
				)
				(?=\s*\()
			</string>
			<key>name</key>
			<string>support.function.sql</string>
		</dict>


		<dict comment="PLSQL exception names">
			<key>match</key>
			<string>(?i)\b(invalid_cursor|invalid_number|no_data_found|others|too_many_rows|transaction_backed_out|value_error|zero_divide)\b</string>
			<key>name</key>
			<string>support.type.exception.sql</string>
		</dict>
		<dict comment="Custom functions">
			<key>match</key>
			<string>(?i)\b(fn_.*?)\b</string>
			<key>name</key>
			<string>support.function.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.DML.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:\b((create|or|replace)\s+)*\s*(aggregate|conversion|database|domain|function|package|procedure|group|(unique\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)</string>
			<key>name</key>
			<string>keyword.other.DML.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(concatenate|convert|lower|substring|translate|[rl]?trim|upper|replicate|replace)\b</string>
			<key>name</key>
			<string>support.function.string.sql</string>
		</dict>
		<dict comment="PLSQL method_call(">
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.function-call.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i)\b\[?([\w_\-\d]*)\]?\s*\(</string>
		</dict>
	</array>

	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict comment="bang! comment">
					<key>name</key>
					<string>comment.line.double-dash.sql markup.bold.sql</string>
					<key>match</key>
					<string>(?i)--\s*![_|!]!.*?$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.sql</string>
				</dict>
				<!-- <dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.sql</string>
				</dict> -->
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
			</array>
		</dict>
		<key>regexps</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/(?=\S.*/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\/</string>
							<key>name</key>
							<string>constant.character.escape.slash.sql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%r\{</string>
					<key>beginCaptures</key>
					<dict comment="We should probably handle nested bracket pairs!?! -- Allan">
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.modr.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escape</key>
		<dict>
			<key>match</key>
			<string>`.</string>
			<key>name</key>
			<string>constant.character.escape.sql</string>
		</dict>
		<key>string_interpolation</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#\{)([^\}]*)(\})</string>
			<key>name</key>
			<string>string.interpolated.sql</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict comment="this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.">
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(')[^'\\]*(')</string>
					<key>name</key>
					<string>string.quoted.single.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict comment="this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.">
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(`)[^`\\]*(`)</string>
					<key>name</key>
					<string>string.quoted.other.backtick.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.backtick.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict comment="this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.">
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(")[^"#]*(")</string>
					<key>name</key>
					<string>string.quoted.double.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.quoted.brackets.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>

	<key>scopeName</key>
	<string>source.sql</string>
	<key>uuid</key>
	<string>C49120AC-6ECC-11D9-ACC8-000D93589AF6</string>
</dict>
</plist>
